-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 19


-- !query 0
CREATE table  desc_temp1 (key int COMMENT 'column_comment', val string) USING PARQUET
-- !query 0 schema
struct<>
-- !query 0 output



-- !query 1
CREATE table  desc_temp2 (key int, val string) USING PARQUET
-- !query 1 schema
struct<>
-- !query 1 output



-- !query 2
DESC SELECT key, key + 1 as plusone FROM desc_temp1
-- !query 2 schema
struct<col_name:string,data_type:string,comment:string>
-- !query 2 output
key                 	int                 	column_comment      
plusone             	int


-- !query 3
DESC QUERY SELECT * FROM desc_temp2
-- !query 3 schema
struct<col_name:string,data_type:string,comment:string>
-- !query 3 output
key                 	int                 	                    
val                 	string


-- !query 4
DESC SELECT key, COUNT(*) as count FROM desc_temp1 group by key
-- !query 4 schema
struct<col_name:string,data_type:string,comment:string>
-- !query 4 output
key                 	int                 	column_comment      
count               	bigint


-- !query 5
DESC SELECT 10.00D as col1
-- !query 5 schema
struct<col_name:string,data_type:string,comment:string>
-- !query 5 output
col1                	double


-- !query 6
DESC QUERY SELECT key FROM desc_temp1 UNION ALL select CAST(1 AS DOUBLE)
-- !query 6 schema
struct<col_name:string,data_type:string,comment:string>
-- !query 6 output
key                 	double


-- !query 7
DESC QUERY VALUES(1.00D, 'hello') as tab1(col1, col2)
-- !query 7 schema
struct<col_name:string,data_type:string,comment:string>
-- !query 7 output
col1                	double              	                    
col2                	string


-- !query 8
DESC QUERY FROM desc_temp1 a SELECT *
-- !query 8 schema
struct<col_name:string,data_type:string,comment:string>
-- !query 8 output
key                 	int                 	column_comment      
val                 	string


-- !query 9
DESC WITH s AS (SELECT 'hello' as col1) SELECT * FROM s
-- !query 9 schema
struct<col_name:string,data_type:string,comment:string>
-- !query 9 output
col1                	string


-- !query 10
DESCRIBE QUERY WITH s AS (SELECT * from desc_temp1) SELECT * FROM s
-- !query 10 schema
struct<col_name:string,data_type:string,comment:string>
-- !query 10 output
key                 	int                 	column_comment      
val                 	string


-- !query 11
DESCRIBE SELECT * FROM (FROM desc_temp2 select * select *)
-- !query 11 schema
struct<col_name:string,data_type:string,comment:string>
-- !query 11 output
key                 	int                 	                    
val                 	string


-- !query 12
DESCRIBE INSERT INTO desc_temp1 values (1, 'val1')
-- !query 12 schema
struct<>
-- !query 12 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input 'desc_temp1' expecting {<EOF>, '.'}(line 1, pos 21)

== SQL ==
DESCRIBE INSERT INTO desc_temp1 values (1, 'val1')
---------------------^^^


-- !query 13
DESCRIBE INSERT INTO desc_temp1 SELECT * FROM desc_temp2
-- !query 13 schema
struct<>
-- !query 13 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input 'desc_temp1' expecting {<EOF>, '.'}(line 1, pos 21)

== SQL ==
DESCRIBE INSERT INTO desc_temp1 SELECT * FROM desc_temp2
---------------------^^^


-- !query 14
DESCRIBE
   FROM desc_temp1 a
     insert into desc_temp1 select *
     insert into desc_temp2 select *
-- !query 14 schema
struct<>
-- !query 14 output
org.apache.spark.sql.catalyst.parser.ParseException

mismatched input 'insert' expecting {'MAP', 'REDUCE', 'SELECT'}(line 3, pos 5)

== SQL ==
DESCRIBE
   FROM desc_temp1 a
     insert into desc_temp1 select *
-----^^^
     insert into desc_temp2 select *


-- !query 15
EXPLAIN DESC QUERY SELECT * FROM desc_temp2 WHERE key > 0
-- !query 15 schema
struct<plan:string>
-- !query 15 output
== Physical Plan ==
Execute DescribeQueryCommand
   +- DescribeQueryCommand SELECT * FROM desc_temp2 WHERE key > 0


-- !query 16
EXPLAIN EXTENDED DESC WITH s AS (SELECT 'hello' as col1) SELECT * FROM s
-- !query 16 schema
struct<plan:string>
-- !query 16 output
== Parsed Logical Plan ==
DescribeQueryCommand WITH s AS (SELECT 'hello' as col1) SELECT * FROM s

== Analyzed Logical Plan ==
col_name: string, data_type: string, comment: string
DescribeQueryCommand WITH s AS (SELECT 'hello' as col1) SELECT * FROM s

== Optimized Logical Plan ==
DescribeQueryCommand WITH s AS (SELECT 'hello' as col1) SELECT * FROM s

== Physical Plan ==
Execute DescribeQueryCommand
   +- DescribeQueryCommand WITH s AS (SELECT 'hello' as col1) SELECT * FROM s


-- !query 17
DROP TABLE desc_temp1
-- !query 17 schema
struct<>
-- !query 17 output



-- !query 18
DROP TABLE desc_temp2
-- !query 18 schema
struct<>
-- !query 18 output

