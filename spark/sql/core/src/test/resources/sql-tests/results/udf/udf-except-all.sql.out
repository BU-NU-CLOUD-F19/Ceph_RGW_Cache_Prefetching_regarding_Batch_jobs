-- Automatically generated by SQLQueryTestSuite
-- Number of queries: 27


-- !query 0
CREATE TEMPORARY VIEW tab1 AS SELECT * FROM VALUES
    (0), (1), (2), (2), (2), (2), (3), (null), (null) AS tab1(c1)
-- !query 0 schema
struct<>
-- !query 0 output



-- !query 1
CREATE TEMPORARY VIEW tab2 AS SELECT * FROM VALUES
    (1), (2), (2), (3), (5), (5), (null) AS tab2(c1)
-- !query 1 schema
struct<>
-- !query 1 output



-- !query 2
CREATE TEMPORARY VIEW tab3 AS SELECT * FROM VALUES
    (1, 2), 
    (1, 2),
    (1, 3),
    (2, 3),
    (2, 2)
    AS tab3(k, v)
-- !query 2 schema
struct<>
-- !query 2 output



-- !query 3
CREATE TEMPORARY VIEW tab4 AS SELECT * FROM VALUES
    (1, 2), 
    (2, 3),
    (2, 2),
    (2, 2),
    (2, 20)
    AS tab4(k, v)
-- !query 3 schema
struct<>
-- !query 3 output



-- !query 4
SELECT udf(c1) FROM tab1
EXCEPT ALL
SELECT udf(c1) FROM tab2
-- !query 4 schema
struct<CAST(udf(cast(c1 as string)) AS INT):int>
-- !query 4 output
0
2
2
NULL


-- !query 5
SELECT udf(c1) FROM tab1
MINUS ALL
SELECT udf(c1) FROM tab2
-- !query 5 schema
struct<CAST(udf(cast(c1 as string)) AS INT):int>
-- !query 5 output
0
2
2
NULL


-- !query 6
SELECT udf(c1) FROM tab1
EXCEPT ALL
SELECT udf(c1) FROM tab2 WHERE udf(c1) IS NOT NULL
-- !query 6 schema
struct<CAST(udf(cast(c1 as string)) AS INT):int>
-- !query 6 output
0
2
2
NULL
NULL


-- !query 7
SELECT udf(c1) FROM tab1 WHERE udf(c1) > 5
EXCEPT ALL
SELECT udf(c1) FROM tab2
-- !query 7 schema
struct<CAST(udf(cast(c1 as string)) AS INT):int>
-- !query 7 output



-- !query 8
SELECT udf(c1) FROM tab1
EXCEPT ALL
SELECT udf(c1) FROM tab2 WHERE udf(c1 > udf(6))
-- !query 8 schema
struct<CAST(udf(cast(c1 as string)) AS INT):int>
-- !query 8 output
0
1
2
2
2
2
3
NULL
NULL


-- !query 9
SELECT udf(c1) FROM tab1
EXCEPT ALL
SELECT CAST(udf(1) AS BIGINT)
-- !query 9 schema
struct<CAST(udf(cast(c1 as string)) AS INT):bigint>
-- !query 9 output
0
2
2
2
2
3
NULL
NULL


-- !query 10
SELECT udf(c1) FROM tab1
EXCEPT ALL
SELECT array(1)
-- !query 10 schema
struct<>
-- !query 10 output
org.apache.spark.sql.AnalysisException
ExceptAll can only be performed on tables with the compatible column types. array<int> <> int at the first column of the second table;


-- !query 11
SELECT udf(k), v FROM tab3
EXCEPT ALL
SELECT k, udf(v) FROM tab4
-- !query 11 schema
struct<CAST(udf(cast(k as string)) AS INT):int,v:int>
-- !query 11 output
1	2
1	3


-- !query 12
SELECT k, udf(v) FROM tab4
EXCEPT ALL
SELECT udf(k), v FROM tab3
-- !query 12 schema
struct<k:int,CAST(udf(cast(v as string)) AS INT):int>
-- !query 12 output
2	2
2	20


-- !query 13
SELECT udf(k), udf(v) FROM tab4
EXCEPT ALL
SELECT udf(k), udf(v) FROM tab3
INTERSECT DISTINCT
SELECT udf(k), udf(v) FROM tab4
-- !query 13 schema
struct<CAST(udf(cast(k as string)) AS INT):int,CAST(udf(cast(v as string)) AS INT):int>
-- !query 13 output
2	2
2	20


-- !query 14
SELECT udf(k), v FROM tab4
EXCEPT ALL
SELECT k, udf(v) FROM tab3
EXCEPT DISTINCT
SELECT udf(k), udf(v) FROM tab4
-- !query 14 schema
struct<CAST(udf(cast(k as string)) AS INT):int,v:int>
-- !query 14 output



-- !query 15
SELECT k, udf(v) FROM tab3
EXCEPT ALL
SELECT udf(k), udf(v) FROM tab4
UNION ALL
SELECT udf(k), v FROM tab3
EXCEPT DISTINCT
SELECT k, udf(v) FROM tab4
-- !query 15 schema
struct<k:int,CAST(udf(cast(v as string)) AS INT):int>
-- !query 15 output
1	3


-- !query 16
SELECT k FROM tab3
EXCEPT ALL
SELECT k, v FROM tab4
-- !query 16 schema
struct<>
-- !query 16 output
org.apache.spark.sql.AnalysisException
ExceptAll can only be performed on tables with the same number of columns, but the first table has 1 columns and the second table has 2 columns;


-- !query 17
SELECT udf(k), udf(v) FROM tab3
EXCEPT ALL
SELECT udf(k), udf(v) FROM tab4
UNION
SELECT udf(k), udf(v) FROM tab3
EXCEPT DISTINCT
SELECT udf(k), udf(v) FROM tab4
-- !query 17 schema
struct<CAST(udf(cast(k as string)) AS INT):int,CAST(udf(cast(v as string)) AS INT):int>
-- !query 17 output
1	3


-- !query 18
SELECT udf(k), udf(v) FROM tab3
MINUS ALL
SELECT k, udf(v) FROM tab4
UNION
SELECT udf(k), udf(v) FROM tab3
MINUS DISTINCT
SELECT k, udf(v) FROM tab4
-- !query 18 schema
struct<CAST(udf(cast(k as string)) AS INT):int,CAST(udf(cast(v as string)) AS INT):int>
-- !query 18 output
1	3


-- !query 19
SELECT k, udf(v) FROM tab3
EXCEPT ALL
SELECT udf(k), v FROM tab4
EXCEPT DISTINCT
SELECT k, udf(v) FROM tab3
EXCEPT DISTINCT
SELECT udf(k), v FROM tab4
-- !query 19 schema
struct<k:int,CAST(udf(cast(v as string)) AS INT):int>
-- !query 19 output



-- !query 20
SELECT * 
FROM   (SELECT tab3.k,
               udf(tab4.v)
        FROM   tab3 
               JOIN tab4 
                 ON udf(tab3.k) = tab4.k)
EXCEPT ALL 
SELECT * 
FROM   (SELECT udf(tab3.k),
               tab4.v
        FROM   tab3 
               JOIN tab4 
                 ON tab3.k = udf(tab4.k))
-- !query 20 schema
struct<k:int,CAST(udf(cast(v as string)) AS INT):int>
-- !query 20 output



-- !query 21
SELECT * 
FROM   (SELECT udf(udf(tab3.k)),
               udf(tab4.v)
        FROM   tab3 
               JOIN tab4 
                 ON udf(udf(tab3.k)) = udf(tab4.k))
EXCEPT ALL 
SELECT * 
FROM   (SELECT udf(tab4.v) AS k,
               udf(udf(tab3.k)) AS v
        FROM   tab3 
               JOIN tab4 
                 ON udf(tab3.k) = udf(tab4.k))
-- !query 21 schema
struct<CAST(udf(cast(cast(udf(cast(k as string)) as int) as string)) AS INT):int,CAST(udf(cast(v as string)) AS INT):int>
-- !query 21 output
1	2
1	2
1	2
2	20
2	20
2	3
2	3


-- !query 22
SELECT udf(v) FROM tab3 GROUP BY v
EXCEPT ALL
SELECT udf(k) FROM tab4 GROUP BY k
-- !query 22 schema
struct<CAST(udf(cast(v as string)) AS INT):int>
-- !query 22 output
3


-- !query 23
DROP VIEW IF EXISTS tab1
-- !query 23 schema
struct<>
-- !query 23 output



-- !query 24
DROP VIEW IF EXISTS tab2
-- !query 24 schema
struct<>
-- !query 24 output



-- !query 25
DROP VIEW IF EXISTS tab3
-- !query 25 schema
struct<>
-- !query 25 output



-- !query 26
DROP VIEW IF EXISTS tab4
-- !query 26 schema
struct<>
-- !query 26 output

